//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EchoClient.Echo {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.without-brains.net/echo_service", ConfigurationName="Echo.EchoPortType")]
    public interface EchoPortType {
        
        // CODEGEN: Generating message contract since the operation Echo is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.without-brains.net/echo_service#Echo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        EchoClient.Echo.EchoResponse Echo(EchoClient.Echo.EchoRequest request);
        
        // CODEGEN: Generating message contract since the operation ReverseEcho is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.without-brains.net/echo_service#ReverseEcho", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        EchoClient.Echo.ReverseEchoResponse ReverseEcho(EchoClient.Echo.ReverseEchoRequest request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.without-brains.net/echo")]
    public partial class EchoMessageType : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string messageField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
                this.RaisePropertyChanged("Message");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class EchoRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="EchoRequest", Namespace="http://www.without-brains.net/echo", Order=0)]
        public EchoClient.Echo.EchoMessageType EchoRequest1;
        
        public EchoRequest() {
        }
        
        public EchoRequest(EchoClient.Echo.EchoMessageType EchoRequest1) {
            this.EchoRequest1 = EchoRequest1;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class EchoResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="EchoResponse", Namespace="http://www.without-brains.net/echo", Order=0)]
        public EchoClient.Echo.EchoMessageType EchoResponse1;
        
        public EchoResponse() {
        }
        
        public EchoResponse(EchoClient.Echo.EchoMessageType EchoResponse1) {
            this.EchoResponse1 = EchoResponse1;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ReverseEchoRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="ReverseEchoRequest", Namespace="http://www.without-brains.net/echo", Order=0)]
        public EchoClient.Echo.EchoMessageType ReverseEchoRequest1;
        
        public ReverseEchoRequest() {
        }
        
        public ReverseEchoRequest(EchoClient.Echo.EchoMessageType ReverseEchoRequest1) {
            this.ReverseEchoRequest1 = ReverseEchoRequest1;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ReverseEchoResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="ReverseEchoResponse", Namespace="http://www.without-brains.net/echo", Order=0)]
        public EchoClient.Echo.EchoMessageType ReverseEchoResponse1;
        
        public ReverseEchoResponse() {
        }
        
        public ReverseEchoResponse(EchoClient.Echo.EchoMessageType ReverseEchoResponse1) {
            this.ReverseEchoResponse1 = ReverseEchoResponse1;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface EchoPortTypeChannel : EchoClient.Echo.EchoPortType, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EchoPortTypeClient : System.ServiceModel.ClientBase<EchoClient.Echo.EchoPortType>, EchoClient.Echo.EchoPortType {
        
        public EchoPortTypeClient() {
        }
        
        public EchoPortTypeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EchoPortTypeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EchoPortTypeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EchoPortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EchoClient.Echo.EchoResponse EchoClient.Echo.EchoPortType.Echo(EchoClient.Echo.EchoRequest request) {
            return base.Channel.Echo(request);
        }
        
        public EchoClient.Echo.EchoMessageType Echo(EchoClient.Echo.EchoMessageType EchoRequest1) {
            EchoClient.Echo.EchoRequest inValue = new EchoClient.Echo.EchoRequest();
            inValue.EchoRequest1 = EchoRequest1;
            EchoClient.Echo.EchoResponse retVal = ((EchoClient.Echo.EchoPortType)(this)).Echo(inValue);
            return retVal.EchoResponse1;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        EchoClient.Echo.ReverseEchoResponse EchoClient.Echo.EchoPortType.ReverseEcho(EchoClient.Echo.ReverseEchoRequest request) {
            return base.Channel.ReverseEcho(request);
        }
        
        public EchoClient.Echo.EchoMessageType ReverseEcho(EchoClient.Echo.EchoMessageType ReverseEchoRequest1) {
            EchoClient.Echo.ReverseEchoRequest inValue = new EchoClient.Echo.ReverseEchoRequest();
            inValue.ReverseEchoRequest1 = ReverseEchoRequest1;
            EchoClient.Echo.ReverseEchoResponse retVal = ((EchoClient.Echo.EchoPortType)(this)).ReverseEcho(inValue);
            return retVal.ReverseEchoResponse1;
        }
    }
}
